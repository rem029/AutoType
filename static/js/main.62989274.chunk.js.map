{"version":3,"sources":["components/autotype.js","App.js","index.js"],"names":["AutoType","_ref","text","typeSpeed","loop","pauseTime","style","characters","split","_useState","useState","_useState2","Object","slicedToArray","charArray","setCharArray","_useState3","_useState4","isTyping","setIsTyping","useEffect","length","setTimeout","prevCharArray","concat","react_default","a","createElement","Fragment","App","className","textAlign","color","href","target","rel","components_autotype","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"kOAuDeA,MAlDf,SAAAC,GAA+D,IAA3CC,EAA2CD,EAA3CC,KAAMC,EAAqCF,EAArCE,UAAWC,EAA0BH,EAA1BG,KAAMC,EAAoBJ,EAApBI,UAAWC,EAASL,EAATK,MAC9CC,EAAaL,EAAKM,MAAM,IAD+BC,EAG3BC,mBAAS,IAHkBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGtDK,EAHsDH,EAAA,GAG3CI,EAH2CJ,EAAA,GAAAK,EAI7BN,oBAAS,GAJoBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAItDE,EAJsDD,EAAA,GAI5CE,EAJ4CF,EAAA,GAmC7D,OA7BAG,oBAAU,WAIJF,IACEJ,EAAUO,OAAS,IAAMd,EAAWc,OAAS,EACpCC,WAAW,WACpBP,EAAa,SAACQ,GACZ,OAAOA,EAAcC,OAAOjB,EAAWgB,EAAcF,YAEtDlB,GAECC,GACQkB,WAAW,WACnBP,EAAa,KACZV,KAIR,CAACS,EAAWP,EAAYH,EAAMD,EAAWE,EAAWa,IAEvDE,oBAAU,WACJN,EAAUO,OAAS,IAAMd,EAAWc,OAAS,EAC/CF,GAAY,GAEZA,GAAY,IAEb,CAACL,EAAWP,IAGbkB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,KAAGrB,MAAOA,GAAQQ,KCrCT,SAASe,IACtB,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,KAAGrB,MAAO,CAAEyB,UAAW,WAAvB,UACU,IACRN,EAAAC,EAAAC,cAAA,KAAGrB,MAAO,CAAE0B,MAAO,SAAWC,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAnF,WAIFV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,sBADP,kBAGAF,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,sBADZ,kBAGAF,EAAAC,EAAAC,cAAA,sBACYF,EAAAC,EAAAC,cAAA,sBADZ,6BAGAF,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,uBADP,6BAGAF,EAAAC,EAAAC,cAAA,0DAGFF,EAAAC,EAAAC,cAACS,EAAD,CACElC,KAAM,uBACNC,UAAW,IACXE,UAAW,IACXD,MAAM,EACNE,MAAO,CAAE0B,MAAO,aAGlBP,EAAAC,EAAAC,cAACS,EAAD,CACElC,KAAM,uCACNC,UAAW,IACXE,UAAW,IACXD,MAAM,EACNE,MAAO,CAAE0B,MAAO,aAGlBP,EAAAC,EAAAC,cAACS,EAAD,CACElC,KAAM,uBACNC,UAAW,IACXE,UAAW,IACXD,MAAM,EACNE,MAAO,CAAE0B,MAAO,aAGlBP,EAAAC,EAAAC,cAACS,EAAD,CACElC,KAAM,iFACNC,UAAW,GACXE,UAAW,IACXD,MAAM,EACNE,MAAO,CAAE0B,MAAO,cCxDxB,IAAMK,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPhB,EAAAC,EAAAC,cAACF,EAAAC,EAAMgB,WAAP,KACEjB,EAAAC,EAAAC,cAACE,EAAD,OAEFQ","file":"static/js/main.62989274.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nimport './autotype.css';\r\n\r\nfunction AutoType({ text, typeSpeed, loop, pauseTime, style }) {\r\n  const characters = text.split('');\r\n\r\n  const [charArray, setCharArray] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let insertID,\r\n      clearID = null;\r\n\r\n    if (isTyping) {\r\n      if (charArray.length + 1 !== characters.length + 1) {\r\n        insertID = setTimeout(() => {\r\n          setCharArray((prevCharArray) => {\r\n            return prevCharArray.concat(characters[prevCharArray.length]);\r\n          });\r\n        }, typeSpeed);\r\n      } else {\r\n        if (loop) {\r\n          clearID = setTimeout(() => {\r\n            setCharArray([]);\r\n          }, pauseTime);\r\n        }\r\n      }\r\n    }\r\n  }, [charArray, characters, loop, typeSpeed, pauseTime, isTyping]);\r\n\r\n  useEffect(() => {\r\n    if (charArray.length + 1 !== characters.length + 1) {\r\n      setIsTyping(true);\r\n    } else {\r\n      setIsTyping(false);\r\n    }\r\n  }, [charArray, characters]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <p style={style}>{charArray}</p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAutoType.propTypes = {\r\n  text: propTypes.string,\r\n  typeSpeed: propTypes.number,\r\n  pauseTime: propTypes.number,\r\n  loop: propTypes.bool,\r\n  style: propTypes.object,\r\n};\r\n\r\nexport default AutoType;\r\n","import React from 'react';\nimport './styles.css';\n\nimport AutoType from './components/autotype';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>ReactJS Auto Typer</h1>\n      <p style={{ textAlign: 'center' }}>\n        Made by{' '}\n        <a style={{ color: 'white' }} href=\"https://github.com/rem029\" target=\"_blank\" rel=\"noopener noreferrer\">\n          rem029\n        </a>\n      </p>\n      <div className=\"info\">\n        <h2>Parameters</h2>\n        <p>\n          text <em>(string)</em>: text to type\n        </p>\n        <p>\n          typeSpeed <em>(number)</em>: typing speed\n        </p>\n        <p>\n          pauseTime <em>(number)</em>: pause time after typing\n        </p>\n        <p>\n          loop <em>(boolean)</em>: if typing should repeat\n        </p>\n        <p>can be customized with css or inline styling</p>\n      </div>\n\n      <AutoType\n        text={'I am typing at 100ms'}\n        typeSpeed={100}\n        pauseTime={5000}\n        loop={true}\n        style={{ color: '#000500' }}\n      />\n\n      <AutoType\n        text={'I am typing at 200ms. Loop disabled.'}\n        typeSpeed={200}\n        pauseTime={10000}\n        loop={false}\n        style={{ color: '#362417' }}\n      />\n\n      <AutoType\n        text={'I am typing at 500ms'}\n        typeSpeed={500}\n        pauseTime={5000}\n        loop={true}\n        style={{ color: '#92817A' }}\n      />\n\n      <AutoType\n        text={'I am typing at 50ms with longer text. to style the text. element I used is <p>'}\n        typeSpeed={50}\n        pauseTime={5000}\n        loop={true}\n        style={{ color: '#F1DABF' }}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}